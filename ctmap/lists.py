litchfield = ['Bantam (Litchfield)',
'Barkhamsted',
'Bethlehem',
'Bridgewater',
'Canaan',
'Colebrook',
'Cornwall',
'Falls Village (Canaan)',
'Goshen',
'Harwinton',
'Kent',
'Lakeville (Salisbury)',
'Litchfield',
'Morris',
'New Hartford',
'New Milford',
'New Preston',
'Norfolk',
'Plymouth',
'Roxbury',
'Salisbury',
'Sharon',
'Thomaston',
'Torrington',
'Warren',
'Washington',
'Watertown',
'Winchester',
'Woodbury',]

hartford = [
'Avon',
'Berlin',
'Bloomfield',
'Bristol',
'Broad Brook',
'Burlington',
'Canton',
'Canton Center',
'Collinsville',
'East Berlin',
'East Glastonbury',
'East Granby',
'East Hartford',
'East Hartland',
'East Windsor',
'Enfield',
'Farmington',
'Glastonbury',
'Granby',
'Hartford',
'Manchester',
'Marion',
'Marlborough',
'Milldale',
'New Britain',
'Newington',
'North Canton',
'North Granby',
'Plainville',
'Plantsville',
'Poquonock',
'Rocky Hill',
'Simsbury',
'South Glastonbury',
'South Windsor',
'Southington',
'Suffield',
'Tariffville',
'Unionville',
'Weatogue',
'West Granby',
'West Hartford',
'West Hartland',
'West Simsbury',
'West Suffield',
'Wethersfield',
'Windsor',
'Windsor Locks',
]

tolland = [
'Amston',
'Andover',
'Bolton',
'Columbia',
'Coventry',
'Ellington',
'Hebron',
'Mansfield Center',
'Somers',
'Stafford',
'Stafford Springs',
'Staffordville',
'Storrs Mansfield',
'Tolland',
'Vernon Rockville',
'Willington',
]

windham = [
'Abington',
'Ashford',
'Ballouville',
'Brooklyn',
'Canterbury',
'Central Village',
'Chaplin',
'Danielson',
'Dayville',
'East Killingly',
'East Woodstock',
'Eastford',
'Hampton',
'Moosup',
'North Grosvenordale',
'North Windham',
'Oneco',
'Plainfield',
'Pomfret',
'Pomfret Center',
'Putnam',
'Quinebaug',
'Rogers',
'Scotland',
'South Windham',
'South Woodstock',
'Sterling',
'Thompson',
'Wauregan',
'Willimantic',
'Windham',
'Woodstock',
'Woodstock Valley',
]

fairfield = [
'Bethel',
'Bridgeport',
'Brookfield',
'Cos Cob',
'Danbury',
'Darien',
'Easton',
'Fairfield',
'Georgetown',
'Greenwich',
'Hawleyville',
'Monroe',
'New Canaan',
'New Fairfield',
'Newtown',
'Norwalk',
'Old Greenwich',
'Redding',
'Redding Center',
'Redding Ridge',
'Ridgefield',
'Riverside',
'Sandy Hook',
'Shelton',
'Sherman',
'Southport',
'Stamford',
'Stratford',
'Trumbull',
'Weston',
'Westport',
'Wilton',
]

new_haven = [
'Ansonia',
'Beacon Falls',
'Bethany',
'Branford',
'Cheshire',
'Derby',
'East Haven',
'Guilford',
'Hamden',
'Madison',
'Meriden',
'Middlebury',
'Milford',
'Naugatuck',
'New Haven',
'North Branford',
'North Haven',
'Northford',
'Orange',
'Oxford',
'Prospect',
'Seymour',
'Southbury',
'Wallingford',
'Waterbury',
'West Haven',
'Wolcott',
'Woodbridge',
]

middlesex = [
'Centerbrook',
'Chester',
'Clinton',
'Cobalt',
'Cromwell',
'Deep River',
'Durham',
'East Haddam',
'East Hampton',
'Essex',
'Haddam',
'Higganum',
'Ivoryton',
'Killingworth',
'Middle Haddam',
'Middlefield',
'Middletown',
'Moodus',
'Old Saybrook',
'Portland',
'Rockfall',
'Westbrook',
]

new_london = [
'Baltic',
'Bozrah',
'Colchester',
'East Lyme',
'Gales Ferry',
'Gilman',
'Groton',
'Hadlyme',
'Hanover',
'Jewett City',
'Lebanon',
'Ledyard',
'lyme',
'lyme east',
'old lyme',
'Mashantucket',
'Montville',
'Mystic',
'New London',
'Niantic',
'North Franklin',
'North Stonington',
'Norwich',
'Oakdale',
'Old Lyme',
'Old Mystic',
'Pawcatuck',
'Preston',
'Quaker Hill',
'Salem',
'South Lyme',
'Stonington',
'Taftville',
'Uncasville',
'Versailles',
'Voluntown',
'Waterford',
'West Mystic',
'Yantic',
]

dumas = [1, 8, 7]
troy = [2, 3]
andy = [2, 3, 4]
mike = [5, 7]
ian = [5, 7, 6]
bejing = [7, 6]


def searching(search):
    for x in litchfield:
        if search == x:
            return 'dumas'
        elif search in tolland:
            return 'troy', 'andy'
        elif search in windham:
            return 'troy', 'andy'
        elif search in new_london:
            return 'andy'
        elif search in fairfield:
            return 'mike', 'ian'
        elif search in middlesex:
            return 'ian', 'bejing'
        elif search in new_haven:
            return 'bejing', 'ian'
        elif search in hartford:
            return 'dumas', 'troy', 'bejing'
        else:
        	return 'not a valid town'    
    
